[package]
name = "wasmlib"
version = "0.0.2"
authors = ["沢谷 邦夫 <devel@fathens.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
flutter_rust_bridge = "1.51.0"
wasm-bindgen = { version = "0.2.83", features = ["serde-serialize"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

mpc-ecdsa-wasm = {path = "libs/gg20", version = "*"}

serde = { version = "1.0.148", features = ["derive"] }
serde_bytes = "0.11.7"
num-traits = "0.2.15"
num-integer = "0.1.45"
lazy_static = "1.4.0"

[dev-dependencies]
wasm-bindgen-test = "0.3.33"
uuid = { version = "1.2.2", features = ["v4"] }
serde_json = "1.0.89"

proptest = "1.0.0"
proptest-derive = "0.3.0"
serde_test = "1.0.148"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
